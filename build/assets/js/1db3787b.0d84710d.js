"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[956],{43274:t=>{t.exports=JSON.parse('{"functions":[{"name":"RegisterEntity","desc":"Registers an entity in the state machine with an optional initial state.\\nIf the entity is already registered, a warning is displayed.\\nIf no initial state is provided, the state machine\'s initial state is used.","params":[{"name":"fsm","desc":"The FSM object.","lua_type":"FSM"},{"name":"entity","desc":"The entity to register in the state machine.","lua_type":"Entity"},{"name":"initialState","desc":"Optional. The initial state for the entity. If not provided, the FSM\'s initial state is used.","lua_type":"State"}],"returns":[],"function_type":"method","source":{"line":132,"path":"src/shared/Sorbet/init.lua"}}],"properties":[],"types":[{"name":"FSM","desc":"\\tIsRUnning boolean\\n\\tInitialState State\\n\\tActiveEntities {[Entity]: true}\\n}\\n\\nA state machine class that allows a collection of entities change their states\\nbased on certain conditions & events.","lua_type":"{","source":{"line":32,"path":"src/shared/Sorbet/init.lua"}},{"name":"State","desc":"\\tName: string,\\n\\tOnUpdate : (entity: Entity, fsm: FSM, dt: number) -> nil,\\n\\tOnExit   : (entity: Entity, fsm: FSM) -> nil,\\n\\tEntities : { [Entity]: true },\\n\\n}\\nrepresents a specific mode of an entity within the state machine.","lua_type":"{","source":{"line":84,"path":"src/shared/Sorbet/init.lua"}},{"name":"Entity","desc":"Literally anything.","lua_type":"any","source":{"line":98,"path":"src/shared/Sorbet/init.lua"}}],"name":"Sorbet","desc":"the state machine library","source":{"line":12,"path":"src/shared/Sorbet/init.lua"}}')}}]);